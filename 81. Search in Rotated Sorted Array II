#https://leetcode.com/problems/search-in-rotated-sorted-array-ii/

#The tricky part in this problem is that the array has duplications
#Initially, my method is using a flag to remove the duplicaitons:
#The time complexity is O(n)

class Solution {
public:
    bool search(vector<int>& nums, int target) {
         if(nums.size()==0)
         return false;
         int tail=1;
         for(int i=1; i< nums.size(); i++){
             if(nums[tail-1]!=nums[i]){
                 nums[tail]= nums[i];
                 tail++;
             }
         }
             for(int i=0; i<tail; i++){
                 if(nums[i]==target)
                 return true;
             }
             return false;
    }
};

#After I finished, this AC rate is not high enough. So I think we can also use binary search to solve it.
#In this question, the main reason we cannot use binary search is that duplications make the directly left= mid + 1 / right = mid - 1
#incorrect. So we use a variental binary search.

# The time complexity is also O(n) 
#The main idea is that if we find the left<mid, we use normal BS
#if left>mid,  normal BS
#But when we find the above two condition don't suit, which means left=mid, I could do nothing but make left++.
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        if(nums.size()==0)
        return false;
        int left=0; int right= nums.size()-1;
        while(left<=right){
            int mid= (left+right)/2;
            if(nums[mid]==target || nums[left]==target || nums[right]==target){
                return true;
            }
            if(nums[left]<nums[mid]){
                if(nums[left]<target && nums[mid]> target){
                    right= mid -1 ;
                }
                else 
                left= mid +1 ;
            }
            else if(nums[left]>nums[mid]){
                if(nums[mid]<target && nums[right]>target){
                    left= mid +1;
                }
                else right= mid -1;
            }
            else
            left= left + 1;
        }
        return false;
    }
};
