# https://leetcode.com/problems/search-in-rotated-sorted-array/

#Analysis:
#Initially, I just use the brute-force method: tarvelse from the beginning to the end, and return back the index of the target. Surprisingly
#it works!!
#The initially codes are as following:

#method 1 - brute-force time complexity O(n)
class Solution {
public:
    int search(vector<int>& nums, int target) {
       for(int i=0; i< nums.size(); i++){
       if(nums[i]==target)
       return i;
       }
       return -1;
    }
};

#After doing that, I think the binary search may also work on that question because it is just a varient of the binary
#search: just some digits rotated. So when I use binary search, I just put a judge sentence.
#method 2 codes are as following. The time complexity is O(lgn)

class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.size()==0)
        return -1;
        int low= 0; 
        int high= nums.size()-1;
        int mid= 0;
        while(low<=high) //prevent this out of the scope
        {
            mid= (low+ high)/2;
            if(nums[mid]==target)
            return mid;
            else if(nums[mid]> nums[high]){
                if(target>= nums[low] && target<= nums[mid]){
                    high= mid-1;
                }
                else{
                    low= mid+1;
                }
            }
            else{
                if(target >= nums[mid] && target<= nums[high]){
                    low= mid+1;
                }
                else
                high= mid-1;
            }
        }
        return -1;
    }
};
